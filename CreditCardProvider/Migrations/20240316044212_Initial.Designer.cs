// <auto-generated />
using CreditCardProvider.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CreditCardProvider.Migrations
{
    [DbContext(typeof(CCDBContext))]
    [Migration("20240316044212_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreditCardProvider.Models.Domain.CCCustomer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardLimit")
                        .HasColumnType("int");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<int>("CardTypeIdID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CardTypeIdID");

                    b.ToTable("CCCustomers");
                });

            modelBuilder.Entity("CreditCardProvider.Models.Domain.CCTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CCAvailbleBalance")
                        .HasColumnType("int");

                    b.Property<int>("CCCustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CCCustomerId");

                    b.ToTable("CCTransactions");
                });

            modelBuilder.Entity("CreditCardProvider.Models.Domain.CardType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterestRate")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("CreditCardProvider.Models.Domain.CCCustomer", b =>
                {
                    b.HasOne("CreditCardProvider.Models.Domain.CardType", "CardTypeId")
                        .WithMany()
                        .HasForeignKey("CardTypeIdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardTypeId");
                });

            modelBuilder.Entity("CreditCardProvider.Models.Domain.CCTransactions", b =>
                {
                    b.HasOne("CreditCardProvider.Models.Domain.CCCustomer", "CCCustomers")
                        .WithMany("Transactions")
                        .HasForeignKey("CCCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CCCustomers");
                });

            modelBuilder.Entity("CreditCardProvider.Models.Domain.CCCustomer", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
